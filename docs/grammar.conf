#


digit = [0-9] ;
letter = [A-Za-z] ;


# Whitespace
ws = [ \t\n\r] ;



# Identifiers
ident = (letter | "_")(letter | digit | "_")* ;


# Natural Numbers
num = (base_10_num | base_16_num | base_2_num) ;
base_10_num = (digit)(digit | "_")* ;

base_16_num = "0x"([A-Fa-f] | digit)([A-Fa-f] | digit | "_")* ;

base_2_num = "0b"[01_]* ;




# Expressions
expr_op = ("+" | "-") ;
expr_start_op = (expr_op | "~" | "!") ;
term_op = ("*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>") ;

condition_op = ("==" | "!=" | "<" | "<=" | ">" | ">=" | "&&" | "||");



expr_regular = expr_start_op* term (expr_op term)* ;
expr = expr_regular (condition_op expr_regular)* ;
term = factor (term_op factor)* ;
#factor = (func_call | ident | num | "(" expr ")") ;
factor = (ident | num | "(" expr ")") ;


unsgn_int_typename = ("u8" | "u16" | "u32") ;
sgn_int_typename = ("s8" | "s16" | "s32") ;


var_typename = (unsgn_int_typename | sgn_int_typename) ;


# No arrays yet
#var_decl_innards = ident "[" ident "]" ;
var_decl_innards = ident ;

var_decl = var_typename var_decl_innards ("," var_decl_innards)* ";" ;



program = statements ;

one_statement = (var_decl | non_var_decl_statement) ;
non_var_decl_statement = (while_loop | if_stmt | assignment_stmt) ;

statements = scope | ((var_decl)* (non_var_decl_statement)*) ;

# Create a new scope with this
scope = (one_statement | ("{" statements "}"));


while_loop = "while" "(" expr ")" scope ;
if_stmt = "if" "(" expr ")" scope ;


assignment_stmt = ident "=" expr ";"
